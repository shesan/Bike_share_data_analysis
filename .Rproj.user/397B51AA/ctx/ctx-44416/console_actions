{
    "type": [
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "\nR version 4.1.0 (2021-05-18) -- \"Camp Pontanezen\"\nCopyright (C) 2021 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "> ",
        "library(tidyverse)",
        "Registered S3 methods overwritten by 'dbplyr':\n  method         from\n  print.tbl_lazy     \n  print.tbl_sql      \n",
        "\u001B[30m-- \u001B[1mAttaching packages\u001B[22m ----------------------------------------------------------------------------- tidyverse 1.3.1 --\u001B[39m\n",
        "\u001B[30m\u001B[32mv\u001B[30m \u001B[34mggplot2\u001B[30m 3.3.5     \u001B[32mv\u001B[30m \u001B[34mpurrr  \u001B[30m 0.3.4\n\u001B[32mv\u001B[30m \u001B[34mtibble \u001B[30m 3.1.2     \u001B[32mv\u001B[30m \u001B[34mdplyr  \u001B[30m 1.0.7\n\u001B[32mv\u001B[30m \u001B[34mtidyr  \u001B[30m 1.1.3     \u001B[32mv\u001B[30m \u001B[34mstringr\u001B[30m 1.4.0\n\u001B[32mv\u001B[30m \u001B[34mreadr  \u001B[30m 1.4.0     \u001B[32mv\u001B[30m \u001B[34mforcats\u001B[30m 0.5.1\u001B[39m\n",
        "\u001B[30m-- \u001B[1mConflicts\u001B[22m -------------------------------------------------------------------------------- tidyverse_conflicts() --\n\u001B[31mx\u001B[30m \u001B[34mdplyr\u001B[30m::\u001B[32mfilter()\u001B[30m masks \u001B[34mstats\u001B[30m::filter()\n\u001B[31mx\u001B[30m \u001B[34mdplyr\u001B[30m::\u001B[32mlag()\u001B[30m    masks \u001B[34mstats\u001B[30m::lag()\u001B[39m\n",
        "> ",
        "library(lubridate)",
        "\nAttaching package: ‘lubridate’\n\n",
        "The following objects are masked from ‘package:base’:\n\n    date, intersect, setdiff, union\n\n",
        "> ",
        "library(ggplot2)",
        "> ",
        "library(ggmap)",
        "Google's Terms of Service: https://cloud.google.com/maps-platform/terms/.\n",
        "Please cite ggmap if you use it! See citation(\"ggmap\") for details.\n",
        "> ",
        "library(RColorBrewer)",
        "> ",
        "library(scales)",
        "\nAttaching package: ‘scales’\n\n",
        "The following object is masked from ‘package:purrr’:\n\n    discard\n\n",
        "The following object is masked from ‘package:readr’:\n\n    col_factor\n\n",
        "> ",
        "",
        "> ",
        "options(scipen = 5)",
        "> ",
        "bike_files <- list.files(path = \"./Data/\", recursive = TRUE, full.name = TRUE, pattern = \"*-divvy-tripdata.csv\")",
        "> ",
        "bike_merged <- do.call(rbind, lapply(bike_files, read.csv))",
        "> ",
        "print((paste(nrow(bike_merged), \"Rows Total\")))",
        "[1] \"5088206 Rows Total\"\n",
        "> ",
        "str(bike_merged)",
        "'data.frame':\t5088206 obs. of  13 variables:\n $ ride_id           : chr  \"A847FADBBC638E45\" \"5405B80E996FF60D\" \"5DD24A79A4E006F4\" \"2A59BBDF5CDBA725\" ...\n $ rideable_type     : chr  \"docked_bike\" \"docked_bike\" \"docked_bike\" \"docked_bike\" ...\n $ started_at        : chr  \"2020-04-26 17:45\" \"2020-04-17 17:08\" \"2020-04-01 17:54\" \"2020-04-07 12:50\" ...\n $ ended_at          : chr  \"2020-04-26 18:12\" \"2020-04-17 17:17\" \"2020-04-01 18:08\" \"2020-04-07 13:02\" ...\n $ start_station_name: chr  \"Eckhart Park\" \"Drake Ave & Fullerton Ave\" \"McClurg Ct & Erie St\" \"California Ave & Division St\"",
        " ...\n $ start_station_id  : chr  \"86\" \"503\" \"142\" \"216\" ...\n $ end_station_name  : chr  \"Lincoln Ave & Diversey Pkwy\" \"Kosciuszko Park\" \"Indiana Ave & Roosevelt Rd\" \"Wood St & Augusta Blvd\" ...\n $ end_station_id    : chr  \"152\" \"499\" \"255\" \"657\" ...\n $ start_lat         : num  41.9 41.9 41.9 41.9 41.9 ...\n $ start_lng         : num  -87.7 -87.7 -87.6 -87.7 -87.6 ...\n $ end_lat           : num  41.9 41.9 41.9 41.9 42 ...\n $ end_lng           : num  -87.7 -87.7 -87.6 -87.7 -87.7 ...\n $ member_casual     : chr  ",
        "\"member\" \"member\" \"member\" \"member\" ...\n",
        "> ",
        "bike_unique <- bike_merged[!duplicated(bike_merged$ride_id), ]",
        "> ",
        "print(paste(nrow(bike_merged) - nrow(bike_unique), \"Duplicates Rows Removed \"))",
        "[1] \"209 Duplicates Rows Removed \"\n",
        "> ",
        "colSums(is.na(bike_unique))",
        "           ride_id      rideable_type         started_at           ended_at start_station_name   start_station_id \n                 0                  0                  0                  0                  0              83583 \n  end_station_name     end_station_id          start_lat          start_lng            end_lat            end_lng \n                 0              98104                  0                  0               6173               6173 \n     member_casual \n                 0 \n",
        "> ",
        "bike_prepared <- bike_unique %>% ",
        "+ ",
        "  drop_na() %>%",
        "+ ",
        "  filter(start_station_name != \"\" | end_station_name != \"\")",
        "> ",
        "print((paste(nrow(bike_unique) - nrow(bike_prepared), \"Missing/Null Rows Removed\")))",
        "[1] \"253237 Missing/Null Rows Removed\"\n",
        "> ",
        "colSums(is.na(bike_prepared))",
        "           ride_id      rideable_type         started_at           ended_at start_station_name   start_station_id \n                 0                  0                  0                  0                  0                  0 \n  end_station_name     end_station_id          start_lat          start_lng            end_lat            end_lng \n                 0                  0                  0                  0                  0                  0 \n     member_casual \n                 0 \n",
        "> ",
        "",
        "> ",
        "bike_prepared$started_at <- as.POSIXct(bike_prepared$started_at, format = \"%Y-%m-%d %H:%M\")",
        "> ",
        "bike_prepared$ended_at <- as.POSIXct(bike_prepared$ended_at, format = \"%Y-%m-%d %H:%M\")",
        "> ",
        "",
        "> ",
        "bike_prepared <- bike_prepared %>%",
        "+ ",
        "  mutate(ride_length_sec = as.numeric(difftime(bike_prepared$ended_at,bike_prepared$started_at))) %>%",
        "+ ",
        "  mutate(ride_length_min = as.numeric(difftime(bike_prepared$ended_at,bike_prepared$started_at, units = \"mins\"))) %>%",
        "+ ",
        "  mutate(day_of_week_char = weekdays(bike_prepared$started_at)) %>%",
        "+ ",
        "  mutate(day_of_week_num = wday((bike_prepared$started_at))) %>%",
        "+ ",
        "  mutate(start_hour = hour(bike_prepared$started_at)) %>%",
        "+ ",
        "  mutate(start_day = day(bike_prepared$started_at)) %>%",
        "+ ",
        "  mutate(start_month = month(bike_prepared$started_at)) %>%",
        "+ ",
        "  mutate(start_year = year(bike_prepared$started_at)) %>%",
        "+ ",
        "  mutate(start_year_month = paste(start_year, start_month, sep = \"-\"))",
        "> ",
        "",
        "> ",
        "bike_prepared$day_of_week_char <- ordered(bike_prepared$day_of_week_char, levels=c(\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"))",
        "> ",
        "",
        "> ",
        "bike_prepared$start_year_month <- ordered(bike_prepared$start_year_month, levels=c(\"2020-4\", \"2020-5\", \"2020-6\", \"2020-7\", \"2020-8\", \"2020-9\", \"2020-10\", \"2020-11\", \"2020-12\", \"2021-1\",  \"2021-2\", \"2021-3\",  \"2021-4\",  \"2021-5\",  \"2021-6\"))",
        "> ",
        "",
        "> ",
        "bike_prepared_2 <- bike_prepared %>% ",
        "+ ",
        "  filter(ride_length_sec > 0)",
        "> ",
        "print((paste(nrow(bike_prepared) - nrow(bike_prepared_2), \"Rows Removed, ride length invalid\")))",
        "[1] \"49382 Rows Removed, ride length invalid\"\n",
        "> ",
        "",
        "> ",
        "bike_prepared_2 %>% write.csv(\"./Data/Cleaned_Bike_200204_202106.csv\")",
        "> ",
        "#bike_prepared <- read.csv(\"./Data/Cleaned_Bike_200204_202106.csv\")",
        "\nRestarting R session...\n\n"
    ]
}